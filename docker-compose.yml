# 定义服务，每个服务对应一个容器
services:
  # Node.js 应用服务
  app:
    # 使用当前目录下的 Dockerfile 构建镜像
    build: .
    # 指定容器名称，方便识别和管理
    container_name: graduation_app
    # 设置容器重启策略为 always，确保容器在任何情况下都会自动重启
    restart: always
    # 设置环境变量
    environment:
      - NODE_ENV=production # 设置 Node.js 环境为生产环境
    # 挂载卷，实现数据持久化和共享
    volumes:
      - /www/wwwroot/public:/back-end/public # 将主机的 /www/wwwroot/public 目录挂载到容器的 /back-end/public 目录
    # 仅在内部网络暴露端口，不对外映射
    expose:
      - '3000' # 暴露 3000 端口供内部服务访问
    # 将容器连接到指定网络
    networks:
      - app_network # 连接到名为 app_network 的网络
    # 指定依赖关系，确保在启动本服务前先启动依赖的服务
    depends_on:
      - db # 依赖数据库服务
      - redis # 依赖 Redis 服务

  # Nginx 服务，用作反向代理和 SSL 终止
  nginx:
    # 使用官方 Nginx 最新镜像
    image: nginx:latest
    # 指定容器名称
    container_name: graduation_nginx
    # 设置容器重启策略
    restart: always
    # 端口映射，将容器端口映射到主机端口
    ports:
      - '3000:3000' # 映射 3000 端口，允许通过 3000 端口直接访问
    # 挂载卷，用于配置文件、SSL 证书和日志
    volumes:
      - /www/wwwroot/back-end/nginx/conf.d:/etc/nginx/conf.d # Nginx 配置文件
      - /www/wwwroot/back-end/nginx/ssl:/etc/nginx/ssl # SSL 证书文件
      - /www/wwwroot/back-end/nginx/logs:/var/log/nginx # Nginx 日志文件
    # 将容器连接到指定网络
    networks:
      - app_network
    # 指定依赖关系
    depends_on:
      - app # 依赖 Node.js 应用服务

  # MySQL 数据库服务
  db:
    # 使用 MySQL 8.0 镜像
    image: mysql:8.0
    # 指定容器名称
    container_name: graduation_mysql
    # 设置容器重启策略
    restart: always
    # 设置 MySQL 环境变量
    environment:
      MYSQL_ROOT_PASSWORD: kang # 设置 root 用户密码
      MYSQL_DATABASE: mysql # 创建初始数据库
    # 端口映射
    ports:
      - '3306:3306' # 映射 MySQL 端口，允许从主机直接访问数据库
    # 挂载卷，实现数据持久化
    volumes:
      - /www/wwwroot/mysql-data:/var/lib/mysql # 将主机目录挂载到容器的数据目录
    # 将容器连接到指定网络
    networks:
      - app_network

  # Redis 缓存服务
  redis:
    # 使用 Redis 8.0-M02 镜像
    image: redis:8.0-M02
    # 指定容器名称
    container_name: graduation_redis
    # 设置容器重启策略
    restart: always
    # 端口映射
    ports:
      - '6379:6379' # 映射 Redis 端口，允许从主机直接访问 Redis
    # 挂载卷，实现数据持久化
    volumes:
      - redis_data:/data # 使用命名卷存储 Redis 数据
    # 将容器连接到指定网络
    networks:
      - app_network

# 定义命名卷，用于持久化存储数据
volumes:
  mysql_data: # MySQL 数据卷，自动创建
  redis_data: # Redis 数据卷，自动创建

# 定义网络，用于容器间通信
networks:
  app_network:
    # 使用桥接网络驱动，这是 Docker 的默认网络驱动
    driver: bridge
